package com.revature.bicycleshop.methods;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.sql.*;

import org.apache.log4j.Logger;

import com.revature.bicycleshop.connector.Connector;
import com.revature.bicycleshop.exceptions.NonUniqueUsernameException;
import com.revature.bicycleshop.interfaces.EmployeeInterface;
import com.revature.bicycleshop.merchandise.Bicycles;
import com.revature.bicycleshop.users.Customer;
import com.revature.bicycleshop.users.Employee;

public class EmployeeMethods implements EmployeeInterface {

	private Connector conn = Connector.getConnector();
	Logger log = Logger.getLogger(EmployeeMethods.class.getName());
	



	@Override
	public List<Customer> ViewAllPayments(Integer paymentsmade) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Customer> ViewPending(Integer bioffer) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public void EditExistingBiycles(Integer bimodel, boolean biavailable, String biname) throws SQLException {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void AddCustomer(Customer customer) throws Exception {
		
		Customer c = null;
		
		try (Connection con = conn.getConnection()){
			con.setAutoCommit(false);
			String sql ="INSERT INTO customer  VALUES(default, ?, ?)";
			String[] keys = {"cusid"};
			PreparedStatement pmpt = con.prepareStatement(sql, keys);
			pmpt.setString(1, customer.getCususername());
			pmpt.setString(2, customer.getCuspassword());
			pmpt.executeUpdate();
			ResultSet rs = pmpt.getGeneratedKeys();
			
			while (rs.next()) {
				 Customer custard = new Customer();
				c = custard;
				c.setCusid(rs.getInt(1));
				con.commit(); 
				if(c.equals(null)) {
					con.rollback(); } } 
		} catch (Exception e ) {
			if (e.getMessage().contains("violates unique constraint")) {
				throw new NonUniqueUsernameException();
			}
		} 
		return;
		}

	@Override
	public Bicycles RemoveBi(Bicycles bicycles) throws SQLException {
		
		
		try (Connection con = conn.getConnection()){
			con.setAutoCommit(false);
			String sql ="DELETE FROM bicycles VALUES(?, ?, ?)";
			PreparedStatement pmpt = con.prepareStatement(sql);
			pmpt.setBoolean(1, bicycles.isBiavailable(true));
			pmpt.setInt(2, bicycles.getBimodel());
			pmpt.setString(3, bicycles.getBiname());
			pmpt.executeUpdate(); 
			if(bicycles.equals(null)) {
				con.commit(); }  
			else{
				con.rollback();
			} catch (Exception e) {
				e.printStackTrace();
			} }
				log.debug("Exception thrown when trying to delete bicycle entered: "+bicycles.toString());
			
			}
	
		}
		
		return bicycles;
	}

	@Override
	public Bicycles AddBi(Bicycles bicycles) throws Exception {
		
		try (Connection con = conn.getConnection()){
			con.setAutoCommit(false);
			log.info("Attempting to add the entered bicycles values from the system: "+bicycles.toString());
			String sql ="INSERT INTO bicycles  VALUES(?, ?, ?)";
			PreparedStatement pmpt = con.prepareStatement(sql);
			pmpt.setBoolean(1, bicycles.isBiavailable(true));
			pmpt.setInt(2, bicycles.getBimodel());
			pmpt.setString(3, bicycles.getBiname());
			pmpt.executeUpdate();
			ResultSet rs = pmpt.getGeneratedKeys();
			if (rs.next()) {
				con.commit();
				log.info("Bicycles values were added successfully: "+bicycles.toString());
			}else { 
				con.rollback();
				log.info("Error adding bicycles: "+bicycles.toString());
				
			catch(Exception e ) {
				log.debug("Exception thrown when trying to add: "+bicycles.toString());
				e.printStackTrace();
	}
		return bicycles;
		}
	

	@Override
	public Employee EmpLogin() throws Exception {
	
		Employee employee = new Employee();
	try (Connection con = conn.getConnection()){

		con.setAutoCommit(false);
		String sql  ="SELECT FROM employee (empusername, emppassword) VALUES(?, ?)";
		PreparedStatement pmpt = con.prepareStatement(sql);
		
		pmpt.setString(1, employee.getEmpusername());
		pmpt.setString(2, employee.getEmppassword());
		pmpt.executeQuery();
		 } catch (Exception e) {
				if (e.getMessage().contains("violates unique constraint")) {
					throw new NonUniqueUsernameException();
			}     
	}
	return employee;
}
	
}