package com.revature.bicycleshop.controller;

import org.apache.log4j.Logger;
import com.revature.bicycleshop.*;
import com.revature.bicycleshop.interfaces.CustomerInterface;
import com.revature.bicycleshop.interfaces.EmployeeInterface;
import com.revature.bicycleshop.interfaces.ManagerInterface;
import com.revature.bicycleshop.methods.CustomerMethods;
import com.revature.bicycleshop.methods.EmployeeMethods;
import com.revature.bicycleshop.methods.ManagerMethods;
import com.revature.bicycleshop.users.Customer;
import com.revature.bicycleshop.users.Employee;
import com.revature.bicycleshop.users.Manager;
import com.revature.bicycleshop.users.Users;

import java.util.Scanner;


public class BicycleShopController 
{

	private static Logger Log = Logger.getLogger(BicycleShopController.class.getName());
	private static CustomerInterface customerInterface = new CustomerMethods();
	private static EmployeeInterface emplopyeeInterface = new EmployeeMethods();
	private static ManagerInterface managerInterface = new ManagerMethods();
	private static Scanner scan;
	
	
	public static void main(String[]args) {
		scan = new Scanner(System.in);
		boolean userActive = true;
		
		mainLoop: while (userActive) {
			System.out.println("Hello, Thank you for using Revature BicycleShop App!");
			
		//Customer gotta make a new layer for each
			//Employee
			//Manager
			users loggedinUser = null;
			
			while (loggedinUser == null) {
				System.out.println("What would you like to do?");
				System.out.println("1. Register\n" 
								+ "2. Log in\n"
								+ "Other. Exit");
				String userChoice = scan.nextLine();
				
				switch (userChoice) {
				case "1":
					Log.info("User is registering an account.");
					loggedinUser = CreateCustomer();
					break;
				case "2":
					Log.info("User is logging in.");
					loggedinUser = CusLogin();
					break;
				default:
					Log.info("User is exiting the application.");
					userActive = false;
					break mainLoop;
				}
			}
			//login command using customername and customerpassword
			//view command to view biavailable by bimodel - available bicycles by the bicycle model type
			//offer command for bioffer using paymentplan to make an offer for an available bicycle under paymentplan
			//register command for making a new customername and customerpassword
			//view command to view biowned - owned bicycles
			//view command to view paymentsremain - weekly payments remaining would be (bioffer/paymentplan)-paymentsmade
			menuLoop: while (true) {
				System.out.println("How can I help you today?");
				System.out.println("1. View our selection of Available Bicycles\n2. Make an offer on a Bicycle\n3. View your owned Bicycles \n4. View the number of weekly payments remaining on your payment plan \n5 Make a payment towards your remaining weekly remaining payments \nOther. Log Out");
				if ("Customer".equals(loggedinUser.getCususername())) 
					
					System.out.println("Other. Log out");
						
				else if ("Employee".equals(loggedinUser.getEmpusername()))
						
					System.out.println("6. Add a bicycle to the shop \n7. Remove a bicycle from the shop \n8. View All payments for all Customers \n9.  View pending bike offers from customers awaiting approval \n10. Edit the existing bicycles in stock \nOther. Log Out");
				
				else if ("Manager".equals(loggedinUser.getManusername()))
						
						System.out.println("11. Make a new employee account \n12. View the sales History \n13. Fire an employee \n14. View missed potential sales \nOther Log Out");
				
	
				String input = scan.nextLine();
				switch (input) {
				case "1":
					//view available bicycles
					loggedinUser = getAvailable(loggedinUser);
					break;
				case "2":
					//make an offer offer on available bicycles
					loggedinUser = MakeOffer(loggedinUser);
					break;
				case "3":
					//view your owned bicycles
					loggedinUser = ViewOwned(loggedinUser);
					break;
				case "4":
					//view weekly payments remaining
					loggedinUser = ViewPaymentsRemaining(loggedinUser);
					break;
				case "5":
					//make a payment towards remaining balance
					loggedinUser = MakeaPayment(loggedinUser);
					break;
				case "6":
					//add a bicycle to the shop
					loggedinUser = AddBi(loggedinUser);
					break;
				case "7":
					//remove a bicycle from the shop
					loggedinUser = RemoveBi(loggedinUser);
					break;
				case "8":
					//view all payments for all customers;
					loggedinUser = ViewAllPayments(loggedinUser);
					break;
				case "9":
					//view pending bike offers awaiting approval
					loggedinUser = ViewPending(loggedinUser);
					break;
				case "10":
					//edit the existing bicycles in stock
					loggedinUser = EditExisting(loggedinUser);
					break;
				case "11":
						//make a new employee account
					loggedinUser = CreateEmployee(loggedinUser);
					break;
				case "12":
						//view the sales history
					loggedinUser = getSales(loggedinUser);
					break;
				case "13":
						//fire an employee
					loggedinUser = changeEmployStatus(loggedinUser);
					break;
				case "14":
					 //view missed potential sales
					loggedinUser = getMissedSales(loggedinUser);
					break;
				default: Log.info("User is exiting the application");
				userActive = false;
				break mainLoop;
				
				}
			}
			
			
		}
	}


	private static Users CusLogin() {
		
		while (true) {
			System.out.println("Enter username: ");
			String cususername = scan.nextLine();
			System.out.println("Enter password: ");
			String password = scan.nextLine();
			
			Users Customer = CustomerInterface.CusLoginName(cususername);
			if (Customer == null) {
				Log.debug("User entered a username that doesn't exist.");
				System.out.println("Nobody exists with that username.");
			} else if (Users.getCuspassword().equals(password)) {
				Log.debug("Customer logged in successfully.");
				Log.debug(Customer);
				System.out.println("Welcome back!");
				return Customer;
			} else {
				Log.debug("User entered an incorrect password.");
				System.out.println("That password is incorrect.");
			}
			System.out.println("Do you want to try again? 1 for yes, other for no.");
			String input = scan.nextLine();
			if (!("1".equals(input)))
		}
				return null;
		}
}
	
		



	private static Users CreateCustomer() {
		// TODO Auto-generated method stub
		
		
		
		
		
		
		return null;
	}


	
}



	
	
	//ask for username from user and run scanner input command
		//ask for password from user and run scanner input command
		
		/*if password correct return login successful then proceed according to case
		  if password or username wrong return login unsuccessful rerun cruddisplaylogin and 
		 and display message that login was unsuccessful due to incorrect username or password 
		 */
		
		
		
		//case 1: if employee logins do... run crud display for employee from cruddisplayswitch
		//case 2: if customer logins do...  run crud display for customer from cruddisplayswitch
		//case 3: if management logins do... run crud display for management from cruddisplayswitch
	
	
